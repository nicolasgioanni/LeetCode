{
  "Best Time to Buy and Sell Stock": {
    "categories": [
      "Sliding Window"
    ],
    "folder_name": "0121. Best Time to Buy and Sell Stock",
    "link": {
      "frontend_id": "121",
      "slug": "best-time-to-buy-and-sell-stock",
      "title": "Best Time to Buy and Sell Stock"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Binary Search": {
    "categories": [
      "Binary Search"
    ],
    "folder_name": "0704. Binary Search",
    "link": {
      "frontend_id": "704",
      "slug": "binary-search",
      "title": "Binary Search"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Binary Tree Level Order Traversal": {
    "categories": [
      "Trees"
    ],
    "folder_name": "0102. Binary Tree Level Order Traversal",
    "link": {
      "frontend_id": "102",
      "slug": "binary-tree-level-order-traversal",
      "title": "Binary Tree Level Order Traversal"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Binary Tree Maximum Path Sum": {
    "categories": [
      "Trees"
    ],
    "folder_name": "0124. Binary Tree Maximum Path Sum",
    "link": {
      "frontend_id": "124",
      "slug": "binary-tree-maximum-path-sum",
      "title": "Binary Tree Maximum Path Sum"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Combination Sum": {
    "categories": [
      "Uncategorized"
    ],
    "folder_name": "0039. Combination Sum",
    "link": {
      "frontend_id": "39",
      "slug": "combination-sum",
      "title": "Combination Sum"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Construct Binary Tree From Preorder And Inorder Traversal": {
    "categories": [
      "Trees"
    ],
    "folder_name": "0105. Construct Binary Tree From Preorder And Inorder Traversal",
    "link": {
      "frontend_id": "105",
      "slug": "construct-binary-tree-from-preorder-and-inorder-traversal",
      "title": "Construct Binary Tree From Preorder And Inorder Traversal"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Container With Most Water": {
    "categories": [
      "Two Pointers"
    ],
    "folder_name": "0011. Container With Most Water",
    "link": {
      "frontend_id": "11",
      "slug": "container-with-most-water",
      "title": "Container With Most Water"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Contains Duplicate": {
    "categories": [
      "Arrays & Hashing"
    ],
    "folder_name": "0217. Contains Duplicate",
    "link": {
      "frontend_id": "217",
      "slug": "contains-duplicate",
      "title": "Contains Duplicate"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Encode and Decode Strings": {
    "categories": [
      "Arrays & Hashing"
    ],
    "folder_name": "0271. Encode and Decode Strings",
    "link": {
      "frontend_id": "271",
      "slug": "encode-and-decode-strings",
      "title": "Encode and Decode Strings"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Find Median From Data Stream": {
    "categories": [
      "Uncategorized"
    ],
    "folder_name": "0295. Find Median From Data Stream",
    "link": {
      "frontend_id": "295",
      "slug": "find-median-from-data-stream",
      "title": "Find Median From Data Stream"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Find Minimum In Rotated Sorted Array": {
    "categories": [
      "Binary Search"
    ],
    "folder_name": "0153. Find Minimum In Rotated Sorted Array",
    "link": {
      "frontend_id": "153",
      "slug": "find-minimum-in-rotated-sorted-array",
      "title": "Find Minimum In Rotated Sorted Array"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Group Anagrams": {
    "categories": [
      "Arrays & Hashing"
    ],
    "folder_name": "0049. Group Anagrams",
    "link": {
      "frontend_id": "49",
      "slug": "group-anagrams",
      "title": "Group Anagrams"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Invert Binary Tree": {
    "categories": [
      "Trees"
    ],
    "folder_name": "0226. Invert Binary Tree",
    "link": {
      "frontend_id": "226",
      "slug": "invert-binary-tree",
      "title": "Invert Binary Tree"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Koko Eating Bananas": {
    "categories": [
      "Binary Search"
    ],
    "folder_name": "0875. Koko Eating Bananas",
    "link": {
      "frontend_id": "875",
      "slug": "koko-eating-bananas",
      "title": "Koko Eating Bananas"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Kth Smallest Element In a Bst": {
    "categories": [
      "Trees"
    ],
    "folder_name": "0230. Kth Smallest Element In a Bst",
    "link": {
      "frontend_id": "230",
      "slug": "kth-smallest-element-in-a-bst",
      "title": "Kth Smallest Element In a Bst"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Linked List Cycle": {
    "categories": [
      "Linked List"
    ],
    "folder_name": "0141. Linked List Cycle",
    "link": {
      "frontend_id": "141",
      "slug": "linked-list-cycle",
      "title": "Linked List Cycle"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Longest Consecutive Sequence": {
    "categories": [
      "Arrays & Hashing"
    ],
    "folder_name": "0128. Longest Consecutive Sequence",
    "link": {
      "frontend_id": "128",
      "slug": "longest-consecutive-sequence",
      "title": "Longest Consecutive Sequence"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Longest Repeating Character Replacement": {
    "categories": [
      "Sliding Window"
    ],
    "folder_name": "0424. Longest Repeating Character Replacement",
    "link": {
      "frontend_id": "424",
      "slug": "longest-repeating-character-replacement",
      "title": "Longest Repeating Character Replacement"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Longest Substring Without Repeating Characters": {
    "categories": [
      "Sliding Window"
    ],
    "folder_name": "0003. Longest Substring Without Repeating Characters",
    "link": {
      "frontend_id": "3",
      "slug": "longest-substring-without-repeating-characters",
      "title": "Longest Substring Without Repeating Characters"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Lowest Common Ancestor of a Binary Search Tree": {
    "categories": [
      "Trees"
    ],
    "folder_name": "0235. Lowest Common Ancestor of a Binary Search Tree",
    "link": {
      "frontend_id": "235",
      "slug": "lowest-common-ancestor-of-a-binary-search-tree",
      "title": "Lowest Common Ancestor of a Binary Search Tree"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Maximum Depth of Binary Tree (DFS)": {
    "categories": [
      "Trees"
    ],
    "folder_name": "0104. Maximum Depth of Binary Tree (DFS)",
    "link": {
      "frontend_id": "104",
      "slug": "maximum-depth-of-binary-tree",
      "title": "Maximum Depth of Binary Tree (DFS)"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Merge K Sorted Lists": {
    "categories": [
      "Linked List"
    ],
    "folder_name": "0023. Merge K Sorted Lists",
    "link": {
      "frontend_id": "23",
      "slug": "merge-k-sorted-lists",
      "title": "Merge K Sorted Lists"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Merge Two Sorted Lists": {
    "categories": [
      "Linked List"
    ],
    "folder_name": "0021. Merge Two Sorted Lists",
    "link": {
      "frontend_id": "21",
      "slug": "merge-two-sorted-lists",
      "title": "Merge Two Sorted Lists"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Minimum Window Substring": {
    "categories": [
      "Sliding Window"
    ],
    "folder_name": "0076. Minimum Window Substring",
    "link": {
      "frontend_id": "76",
      "slug": "minimum-window-substring",
      "title": "Minimum Window Substring"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Product of Array Except Self": {
    "categories": [
      "Arrays & Hashing"
    ],
    "folder_name": "0238. Product of Array Except Self",
    "link": {
      "frontend_id": "238",
      "slug": "product-of-array-except-self",
      "title": "Product of Array Except Self"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Remove Nth Node From End of List": {
    "categories": [
      "Linked List"
    ],
    "folder_name": "0019. Remove Nth Node From End of List",
    "link": {
      "frontend_id": "19",
      "slug": "remove-nth-node-from-end-of-list",
      "title": "Remove Nth Node From End of List"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Reorder List": {
    "categories": [
      "Linked List"
    ],
    "folder_name": "0143. Reorder List",
    "link": {
      "frontend_id": "143",
      "slug": "reorder-list",
      "title": "Reorder List"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Reverse Linked List": {
    "categories": [
      "Linked List"
    ],
    "folder_name": "0206. Reverse Linked List",
    "link": {
      "frontend_id": "206",
      "slug": "reverse-linked-list",
      "title": "Reverse Linked List"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Same Tree (DFS)": {
    "categories": [
      "Trees"
    ],
    "folder_name": "0100. Same Tree (DFS)",
    "link": {
      "frontend_id": "100",
      "slug": "same-tree",
      "title": "Same Tree (DFS)"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Search In Rotated Sorted Array": {
    "categories": [
      "Binary Search"
    ],
    "folder_name": "0033. Search In Rotated Sorted Array",
    "link": {
      "frontend_id": "33",
      "slug": "search-in-rotated-sorted-array",
      "title": "Search In Rotated Sorted Array"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Search a 2D Matrix": {
    "categories": [
      "Binary Search"
    ],
    "folder_name": "0074. Search a 2D Matrix",
    "link": {
      "frontend_id": "74",
      "slug": "search-a-2d-matrix",
      "title": "Search a 2D Matrix"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Serialize And Deserialize Binary Tree": {
    "categories": [
      "Trees"
    ],
    "folder_name": "0297. Serialize And Deserialize Binary Tree",
    "link": {
      "frontend_id": "297",
      "slug": "serialize-and-deserialize-binary-tree",
      "title": "Serialize And Deserialize Binary Tree"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Subtree of Another Tree (DFS)": {
    "categories": [
      "Trees"
    ],
    "folder_name": "0572. Subtree of Another Tree (DFS)",
    "link": {
      "frontend_id": "572",
      "slug": "subtree-of-another-tree",
      "title": "Subtree of Another Tree (DFS)"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Three Sum": {
    "categories": [
      "Two Pointers"
    ],
    "folder_name": "0015. Three Sum",
    "link": {
      "frontend_id": "15",
      "slug": "3sum",
      "title": "Three Sum"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Top K Frequent Elements": {
    "categories": [
      "Arrays & Hashing"
    ],
    "folder_name": "0347. Top K Frequent Elements",
    "link": {
      "frontend_id": "347",
      "slug": "top-k-frequent-elements",
      "title": "Top K Frequent Elements"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Two Sum": {
    "categories": [
      "Arrays & Hashing"
    ],
    "folder_name": "0001. Two Sum",
    "link": {
      "frontend_id": "1",
      "slug": "two-sum",
      "title": "Two Sum"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Two Sum II Input Array Is Sorted": {
    "categories": [
      "Two Pointers"
    ],
    "folder_name": "0167. Two Sum II Input Array Is Sorted",
    "link": {
      "frontend_id": "167",
      "slug": "two-sum-ii-input-array-is-sorted",
      "title": "Two Sum II Input Array Is Sorted"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Valid Anagram": {
    "categories": [
      "Arrays & Hashing"
    ],
    "folder_name": "0242. Valid Anagram",
    "link": {
      "frontend_id": "242",
      "slug": "valid-anagram",
      "title": "Valid Anagram"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Valid Palindrome": {
    "categories": [
      "Two Pointers"
    ],
    "folder_name": "0125. Valid Palindrome",
    "link": {
      "frontend_id": "125",
      "slug": "valid-palindrome",
      "title": "Valid Palindrome"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Valid Parentheses": {
    "categories": [
      "Stack"
    ],
    "folder_name": "0020. Valid Parentheses",
    "link": {
      "frontend_id": "20",
      "slug": "valid-parentheses",
      "title": "Valid Parentheses"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Validate Binary Search Tree": {
    "categories": [
      "Trees"
    ],
    "folder_name": "0098. Validate Binary Search Tree",
    "link": {
      "frontend_id": "98",
      "slug": "validate-binary-search-tree",
      "title": "Validate Binary Search Tree"
    },
    "sources": [
      "blind75",
      "neetcode150"
    ]
  },
  "Word Search": {
    "categories": [
      "Uncategorized"
    ],
    "folder_name": "0079. Word Search",
    "link": {
      "frontend_id": "79",
      "slug": "word-search",
      "title": "Word Search"
    },
    "sources": [
      "blind75"
    ]
  }
}